---
import { cn } from '@/utils'
import Close from './icons/Close.astro'

type Contents = {
  label: string
  link: string
}

interface Props {
  title: string
  contents: Contents[]
  type: 'solid' | 'outline' // change the type of modal button
  color?: string // change the color of modal button
}
const { title, contents, type, color }: Props = Astro.props
---

<!-- Button to open the modal -->
<button
  id="openModalButton"
  class-={cn(
    'text-white px-6 py-3',
    type === 'solid' && color ? `bg-${color}-500  rounded-md` : ``,
  )}
>
  <!-- the text of the button that to open modal -->
  <slot />
</button>

<!-- Modal Container -->
<div
  id="modal"
  class="hidden fixed dark:text-black inset-0 bg-black bg-opacity-70 justify-center items-center transition-opacity opacity-0"
>
  <div
    id="modalContent"
    class="w-screen h-screen bg-white p-8 transform transition-transform scale-95"
  >
    <section class="flex justify-between items-center mb-10">
      <h1 class="text-3xl">{title}</h1>
      <button id="closeModalButton">
        <Close />
      </button>
    </section>

    <section class="text-center">
      {
        contents.map((content) => (
          <a href={content.link}>
            <h1 class="my-5 text-xl">{content.label}</h1>
          </a>
        ))
      }
    </section>
  </div>
</div>

<script>
  // Select modal elements
  const modal: HTMLElement | null = document.getElementById('modal')
  const modalContent: HTMLElement | null =
    document.getElementById('modalContent')
  const openModalButton: HTMLElement | null =
    document.getElementById('openModalButton')
  const closeModalButton: HTMLElement | null =
    document.getElementById('closeModalButton')

  // Function to open the modal
  const openModal = () => {
    if (modal && modalContent) {
      modal.style.display = 'flex' // Show the modal
      requestAnimationFrame(() => {
        modal.style.opacity = '1' // Fully opaque
        modalContent.classList.remove('scale-95') // Set scale to normal size
        modalContent.classList.add('transition-transform', 'show') // Trigger scale animation
      })
    }
  }

  // Function to close the modal
  const closeModal = () => {
    if (modal && modalContent) {
      modalContent.classList.add('scale-95') // Scale down
      modal.style.opacity = '0' // Fade out
      setTimeout(() => {
        modal.style.display = 'none' // Hide modal
        modalContent.classList.remove('scale-95') // Reset scale for next open
        modalContent.classList.remove('transition-transform', 'show') // Reset show class
      }, 300) // Match this duration with the CSS transition duration
    }
  }

  // click outside of modal content to close modal
  // if (modal)
  //   modal.addEventListener('click', (e) => {
  //     if (e.target === modal) {
  //       closeModal()
  //     }
  //   })

  // Event listeners
  if (closeModalButton) closeModalButton.addEventListener('click', closeModal)
  if (openModalButton) openModalButton.addEventListener('click', openModal)
</script>
