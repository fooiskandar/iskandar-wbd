---
import PostTag from '@/components/PostTag'
import { Image } from 'astro:assets'
import FormattedDate from '@/components/FormattedDate'
import { getTags } from '@/utils'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'

type HeroImage = {
  height: number
  width: number
  format: 'svg' | 'avif' | 'png' | 'webp' | 'jpeg' | 'jpg' | 'tiff' | 'gif'
  src: string
}
interface Props {
  id: string
  data: {
    title: string
    description: string
    pubDate: Date
    heroImage: HeroImage
  }
  readTime: number
  slug: string
}

const {
  id,
  data: { title, description, pubDate, heroImage },
  readTime,
  slug,
}: Props = Astro.props

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const tags = await getTags()
---

<article class="grid grid-rows-[300px_0] group">
  <a
    class="rounded-xl overflow-hidden"
    href={lang === 'en' ? `/post/${slug}` : `/${lang}/post/${slug}`}
  >
    <Image
      src={heroImage}
      width={1000}
      height={200}
      format="webp"
      class="h-full min-w-full object-cover hover:scale-110 transition-transform duration-200"
      alt={`img of ${title}`}
    />
  </a>

  <div class="flex gap-2 mt-4 font-semibold">
    <FormattedDate date={pubDate} />
    <span class="text-sm"> â€¢ {readTime} {t('minutes')}</span>
  </div>

  <div class="gap-4 md:gap-0 my-10">
    <div>
      <a class="text-2xl font-semibold -tracking-wider" href={`/post/${slug}/`}>
        {title}
      </a>
    </div>

    <p
      class="overflow-hidden line-clamp-3 text-grayDeep dark:text-grayLight mb-5 text-sm"
    >
      {description}
    </p>

    <footer class="flex justify-start flex-wrap gap-1 gap-y-2">
      {
        tags.map((tag) => (
          <a href={`/tags/${tag}`}>
            <PostTag tag={tag} />
          </a>
        ))
      }
    </footer>
  </div>
</article>

<script>
  import { animate } from 'motion'

  const images = document.querySelectorAll('img')

  document.addEventListener('DOMContentLoaded', () => {
    const showAnimations = localStorage.getItem('animations') === 'true'

    if (showAnimations) {
      animate(
        '.effect',
        {
          opacity: [0, 1],
          clipPath: ['circle(0% at 0% 0%)', 'circle(100% at 50% 50%)'],
        },
        { duration: 2, easing: 'ease' },
      )
    } else {
      images.forEach((img) => {
        img.classList.remove('opacity-0')
      })
    }
  })
</script>
